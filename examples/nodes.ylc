import "libffi.so"
type Signal = struct (
  double[512] data,
  int layout
)
let print_signal = extern fn (&Signal s) int

let Signal s

#s.data[0]

print_signal(&s)

let printf = extern fn (str fmt, ...) int
printf("sig 0: %f\n", s.data[0])



#typedef struct Node {
#  Signal *ins;
#  int num_ins;
#
#  Signal add;
#  Signal mul;
#  Signal out;
#
#  node_perform perform;
#  void *data;
#  const char *name;
#
#  // 'ephemeral value' for offsetting the calculation of a node's frames into
#  // a block - should be accessed by `int get_block_offset(Node *node)` that
#  // resets it to 0 after reading
#  int _block_offset;
#
#  bool killed;
#
#  struct Node *next;
#  struct Node *prev;
#  struct Node *parent;
#  struct Node *_sub;
#  struct Node *
#      _sub_tail; // optional pointer to a node before the add_out or replace_out
#                 // node found at the end of a Container Node's signal chain
#} Node;
