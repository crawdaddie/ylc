import "libs/libyalce_synth.so"


let printf = extern fn (str fmt, ...) int
let fprintf = printf

import "libffi.so"
let randint = extern fn (int max) int
let randfloat = extern fn (double max) double

#type ThreadCb = fn (int x) int
#let create_thread = extern fn (ThreadCb start, int arg) int  


type Node = int8 
let setup_audio = extern fn () int
let stop_audio  = extern fn () int
let sq_detune   = extern fn (double freq) Node
let impulse     = extern fn (double freq) Node

let lpf = extern fn (double freq, double bw) Node
let play_node = extern fn (Node node) Node

let chain = extern fn (int sig_idx, Node dest, Node src) Node
let msleepd = extern fn (double msec) int

let sq_synth = fn (double freq, double lpfreq) Node {
    let snd = sq_detune(freq)
    snd = chain(0, lpf(lpfreq, 0.1), snd)
    play_node(snd)
}

#type CCHandlerType = fn (int chan, int cc, int val) int
#
#let register_midi_handler = extern fn (int ch, int cc, CCHandlerType cb) void

setup_audio()


let msleepd = extern fn (double msec) int


let write_log = extern fn (str fmt, ...) int

let do_stuff = fn () {
  let synth = sq_synth(100.0, 500.0)
  printf("start synth %p\n", synth)

  let g = fn (int i) int {
    match i
    | 100 -> 1
    | _ -> {
      msleepd(randfloat(500.0) + 1)
      write_log("hi %d\n", i)
      g(i + 1)
    }
  }
  #printf("thread: %d\n",  create_thread(g, 0))
}

do_stuff()
